name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  
jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          cp .env.example .env.test
          npm run db:push:test

      - name: Run unit tests
        run: npm run test -- --coverage --run

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: npm run test:coverage-check

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      sqlite:
        image: alpine:latest
        options: --health-cmd "true" --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup integration test environment
        run: |
          cp .env.example .env.test
          npm run db:push:test
          npm run db:seed:test

      - name: Run integration tests
        run: npm run test:integration

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          npm run db:push:test
          npm run db:seed:test

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Run Playwright tests
        run: npm run e2e
        env:
          CI: true

      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-test-results
          path: test-results/
          retention-days: 7

      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-html-report
          path: playwright-report/
          retention-days: 7

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: accessibility-report/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run security linting
        run: npm run lint:security

      - name: Check for hardcoded secrets
        run: npm run security:secrets

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Check bundle size
        run: npm run analyze:bundle

      - name: Test production start
        run: |
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
          pkill -f "npm run start"

  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, e2e-tests, accessibility-tests, security-scan, build-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment ready notification
        run: |
          echo "✅ All checks passed! Ready for deployment."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, e2e-tests, accessibility-tests, security-scan, build-test]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ CI pipeline failed!"
          echo "Please check the failed jobs and fix the issues."
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"